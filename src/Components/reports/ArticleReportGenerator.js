import React, { useState } from 'react';
import { 
  Button, Dialog, DialogActions, DialogContent, DialogTitle, 
  FormControl, FormControlLabel, Checkbox, Typography, Box, 
  CircularProgress, Divider, MenuItem, Select, InputLabel, 
  TextField, IconButton
} from '@mui/material';
import { 
  PictureAsPdf, Close, Download
} from '@mui/icons-material';
import { format } from 'date-fns';
import { jsPDF } from "jspdf";
import autoTable from 'jspdf-autotable';

const ArticleReportGenerator = ({ articles, doctorName }) => {
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [reportOptions, setReportOptions] = useState({
    includeContent: true,
    includeMetadata: true,
    dateRange: 'all',
    customStartDate: '',
    customEndDate: '',
  });
  
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);
  
  const handleOptionChange = (event) => {
    const { name, checked, value } = event.target;
    setReportOptions({
      ...reportOptions,
      [name]: name === 'includeContent' || name === 'includeMetadata' ? checked : value
    });
  };
  
  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setReportOptions({
      ...reportOptions,
      [name]: value
    });
  };
  
  const filterArticlesByDate = () => {
    if (reportOptions.dateRange === 'all') {
      return articles;
    }
    
    const today = new Date();
    let startDate;
    
    if (reportOptions.dateRange === 'custom' && 
        reportOptions.customStartDate && 
        reportOptions.customEndDate) {
      startDate = new Date(reportOptions.customStartDate);
      const endDate = new Date(reportOptions.customEndDate);
      endDate.setHours(23, 59, 59, 999);
      
      return articles.filter(article => {
        const articleDate = new Date(article.date);
        return articleDate >= startDate && articleDate <= endDate;
      });
    }
    
    switch (reportOptions.dateRange) {
      case 'last7days':
        startDate = new Date(today);
        startDate.setDate(today.getDate() - 7);
        break;
      case 'last30days':
        startDate = new Date(today);
        startDate.setDate(today.getDate() - 30);
        break;
      case 'last90days':
        startDate = new Date(today);
        startDate.setDate(today.getDate() - 90);
        break;
      default:
        return articles;
    }
    
    return articles.filter(article => new Date(article.date) >= startDate);
  };
  
  const generatePDF = () => {
    setLoading(true);
    
    try {
      const filteredArticles = filterArticlesByDate();
      
      // Create a new PDF document
      const doc = new jsPDF();
      
      // Add title
      doc.setFontSize(18);
      doc.text('PetWell 360 - Articles Report', 105, 15, { align: 'center' });
      
      // Add basic info
      doc.setFontSize(10);
      doc.text(`Generated by: Dr. ${doctorName || 'Doctor'}`, 14, 25);
      doc.text(`Date: ${format(new Date(), 'MM/dd/yyyy')}`, 14, 30);
      doc.text(`Total Articles: ${filteredArticles.length}`, 14, 35);
      
      // Add articles table
      const tableColumn = ['#', 'Title', 'Author', 'Date'];
      const tableRows = [];
      
      filteredArticles.forEach((article, index) => {
        const articleData = [
          index + 1,
          article.title,
          article.author,
          format(new Date(article.date), 'MM/dd/yyyy')
        ];
        tableRows.push(articleData);
      });
      
      // Generate the table using the imported autoTable function
      autoTable(doc, {
        head: [tableColumn],
        body: tableRows,
        startY: 40,
        styles: { fontSize: 8 },
        headStyles: { fillColor: [41, 128, 185], textColor: 255 },
        alternateRowStyles: { fillColor: [242, 242, 242] },
        margin: { top: 40 }
      });
      
      // Add article details if requested
      if (reportOptions.includeContent) {
        // Get the final Y position of the table
        let yPos = doc.lastAutoTable.finalY + 10;
        
        doc.setFontSize(14);
        doc.text('Article Details', 14, yPos);
        yPos += 7;
        
        // Loop through articles and add details
        filteredArticles.forEach((article, index) => {
          // Check if we need a new page
          if (yPos > 270) {
            doc.addPage();
            yPos = 20;
          }
          
          // Add article title
          doc.setFontSize(12);
          doc.text(`${index + 1}. ${article.title}`, 14, yPos);
          yPos += 6;
          
          // Add metadata if requested
          if (reportOptions.includeMetadata) {
            doc.setFontSize(8);
            doc.text(`Author: ${article.author} | Date: ${format(new Date(article.date), 'MM/dd/yyyy')}`, 14, yPos);
            yPos += 5;
          }
          
          // Add content
          if (article.content) {
            doc.setFontSize(9);
            
            // Split the text to fit within page width
            const textLines = doc.splitTextToSize(article.content, 180);
            
            // Check if we need a new page for the content
            if (yPos + (textLines.length * 3.5) > 280) {
              doc.addPage();
              yPos = 20;
            }
            
            doc.text(textLines, 14, yPos);
            yPos += (textLines.length * 3.5) + 10;
          } else {
            yPos += 5;
          }
          
          // Add a divider line
          doc.line(14, yPos - 5, 196, yPos - 5);
        });
      }
      
      // Save the PDF
      doc.save(`PetWell360_Articles_Report_${format(new Date(), 'yyyyMMdd')}.pdf`);
      
      console.log("PDF generated successfully");
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Error generating PDF. Please check the console for details.');
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <>
      <Button
        variant="outlined"
        color="primary"
        startIcon={<PictureAsPdf />}
        onClick={handleOpen}
      >
        Articles Report
      </Button>
      
      <Dialog
        open={open}
        onClose={handleClose}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          <Box display="flex" justifyContent="space-between" alignItems="center">
            <Typography variant="h6">Generate Articles Report</Typography>
            <IconButton onClick={handleClose} size="small">
              <Close />
            </IconButton>
          </Box>
        </DialogTitle>
        
        <DialogContent dividers>
          <Typography variant="subtitle2" gutterBottom>Report Options</Typography>
          <Divider sx={{ mb: 2 }} />
          
          <Box sx={{ mb: 3 }}>
            <Typography variant="body2" gutterBottom>Content Options:</Typography>
            <FormControlLabel
              control={
                <Checkbox 
                  checked={reportOptions.includeContent}
                  onChange={handleOptionChange}
                  name="includeContent"
                />
              }
              label="Include Article Content"
            />
            <FormControlLabel
              control={
                <Checkbox 
                  checked={reportOptions.includeMetadata}
                  onChange={handleOptionChange}
                  name="includeMetadata"
                />
              }
              label="Include Author & Date"
            />
          </Box>
          
          <Box sx={{ mb: 3 }}>
            <Typography variant="body2" gutterBottom>Date Range:</Typography>
            <FormControl fullWidth size="small" sx={{ mb: 2 }}>
              <InputLabel>Filter by Date</InputLabel>
              <Select
                value={reportOptions.dateRange}
                onChange={handleOptionChange}
                name="dateRange"
                label="Filter by Date"
              >
                <MenuItem value="all">All Time</MenuItem>
                <MenuItem value="last7days">Last 7 Days</MenuItem>
                <MenuItem value="last30days">Last 30 Days</MenuItem>
                <MenuItem value="last90days">Last 90 Days</MenuItem>
                <MenuItem value="custom">Custom Range</MenuItem>
              </Select>
            </FormControl>
            
            {reportOptions.dateRange === 'custom' && (
              <Box sx={{ display: 'flex', gap: 2 }}>
                <TextField
                  label="Start Date"
                  type="date"
                  name="customStartDate"
                  value={reportOptions.customStartDate}
                  onChange={handleInputChange}
                  InputLabelProps={{ shrink: true }}
                  size="small"
                  fullWidth
                />
                <TextField
                  label="End Date"
                  type="date"
                  name="customEndDate"
                  value={reportOptions.customEndDate}
                  onChange={handleInputChange}
                  InputLabelProps={{ shrink: true }}
                  size="small"
                  fullWidth
                />
              </Box>
            )}
          </Box>
        </DialogContent>
        
        <DialogActions>
          <Button onClick={handleClose} color="inherit">
            Cancel
          </Button>
          <Button 
            onClick={generatePDF} 
            variant="contained" 
            color="primary"
            startIcon={loading ? <CircularProgress size={20} /> : <Download />}
            disabled={loading}
          >
            {loading ? 'Generating...' : 'Download PDF'}
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default ArticleReportGenerator;
